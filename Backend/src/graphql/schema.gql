type Query {
  container(id: ID!): Container
  containers(collectionId: ID): [Container!]!
  containersWithoutCollection: [Container!]!
  collection(id: ID!): Collection
  collections: [Collection!]!
  user(id: ID!): User
  users: [User!]!
}

type Mutation {
  addContainer(input: ContainerInput!): Container
  updateContainer(id: ID!, input: ContainerInput): Container
  deleteContainer(id: ID!): Container
  addCollection(input: CollectionInput!): Collection
  updateCollection(id: ID!, input: CollectionInput): Collection
  deleteCollection(id: ID!): Collection
}

input ContainerInput {
  type: String!
  name: String!
  description: String!
  imageUrl: String!
  year: Int!
  price: Float!
  country: String!
  hasLabel: Boolean!
  owner: String!
}

type Container {
  id: ID!
  type: String!
  name: String!
  description: String!
  imageUrl: String!
  year: Int!
  price: Float!
  country: String!
  hasLabel: Boolean!
  owner: String!
  views: Int!
}

input CollectionInput {
  name: String!
  description: String!
  imageUrl: String!
  owner: String!
  containers: [ID!]!
}

type Collection {
  id: ID!
  name: String!
  description: String!
  imageUrl: String!
  owner: String!
  containers: [Container]!
}

type User {
  id: ID!
  username: String!
}
